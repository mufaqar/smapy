// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = false // (default) represent the prisma Decimal type using as a JS number
  // useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "./zod-add-schema" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  // prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model SystemEvents {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  subject   String
  details   Json?
}

model AdminOperations {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  user      String
  cmd       String
  params    String?
  moreInfo  Json?
  status    String
  details   Json?
}

model UserProfile {
  id String @id

  id_card_number String? @unique

  email                      String? // too hard to get from auth.users, trigger to update
  first_name                 String?
  last_name                  String?
  phone                      String?   @unique
  avatar_url                 String?
  address                    String?
  acceptedTermsAndConditions DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  email_new_value        String?
  email_time             DateTime?
  email_verificationCode String?
  email_verified         DateTime?

  phone_new_value        String?
  phone_time             DateTime?
  phone_verificationCode String?
  phone_verified         DateTime?

  years_experience Int?
  worker_type      String?
  workplace_name   String?
  number_of_files  Int?

  certificate_id_picture       String?
  certificate_id_picture_later Boolean?

  bank_name          String?
  bank_branch        String?
  bank_number        String?
  bank_branch_number String?
  bank_account       String?
  bank_details_later Boolean?

  is_advisor Boolean @default(false)

  advisor_status UserStatus @default(init)
  notes          String?

  signed_terms  DateTime?
  lifeInsurance lifeInsurance[]
  customer      customer[]
}

enum UserStatus {
  init
  approved
  rejected
}

enum InsuranceStatus {
  init
  approved
  cancled
}

model lifeInsurance {
  id         String    @id @default(dbgenerated("uuid_generate_v4()"))
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  statusDate DateTime?

  advisorId String
  advisor   UserProfile @relation(fields: [advisorId], references: [id])

  number_of_customers Int @default(1)

  loan_tracks_count Int?

  same_address_mortgage     Boolean?
  property_city             String?
  property_street           String?
  property_street_number    String?
  property_apartment_number String?

  insurance_start_date DateTime?
  bank_name            String?
  bank_branch          String?
  bank_number          String?
  bank_branch_number   String?

  details_approval DateTime?

  /// @zod.custom(imports.LoanTracks)
  loan_tracks Json?

  total Float?

  status InsuranceStatus @default(init)

  lifeInsuranceCustomer lifeInsuranceCustomer[]
}

model lifeInsuranceCustomer {
  lifeInsurance   lifeInsurance @relation(fields: [lifeInsuranceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lifeInsuranceId String

  customer   customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String

  sort Int

  @@unique([lifeInsuranceId, customerId])
}

enum Gender {
  male
  female
  na
}

enum Smoking {
  yes
  no
  stop
}

enum FamilyStatus {
  Single
  Married
  Divorced
  Separated
  Widowed
}

model customer {
  id String @id @default(dbgenerated("uuid_generate_v4()"))

  userId      String?
  userProfile UserProfile? @relation(fields: [userId], references: [id])

  gender  Gender?
  smoking Smoking?

  smoking_stop_month Int?
  first_name         String?
  last_name          String?
  card_id            String?
  phone              String?
  email              String?

  city             String?
  street           String?
  street_number    String?
  apartment_number String?

  family_status FamilyStatus

  birthDate DateTime?

  occupation           String?
  dangerous_hobby_has  Boolean?
  dangerous_hobby      String?
  dangerous_hobby_desc String?

  lifeInsuranceCustomer lifeInsuranceCustomer[]
}

model contactUsRequest {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())

  product      String?
  name         String?
  subject      String?
  contact_info String
}
